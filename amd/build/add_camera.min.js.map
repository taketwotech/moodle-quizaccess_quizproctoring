{"version":3,"file":"add_camera.min.js","sources":["../src/add_camera.js"],"sourcesContent":["/**\r\n * JavaScript class for Camera\r\n *\r\n * @subpackage quizproctoring\r\n * @copyright  2020 Mahendra Soni <ms@taketwotechnologies.com> {@link https://taketwotechnologies.com}\r\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n */\r\nwindow.addEventListener('beforeunload', function(event) {\r\n    event.stopImmediatePropagation();\r\n    event.returnValue = '';\r\n});\r\ndefine(['jquery', 'core/str', 'core/modal_factory', 'core/ajax'],\r\nfunction($, str, ModalFactory) {\r\n    var Camera = function(cmid, mainimage = false, attemptid = null, quizid) {\r\n        var docElement = $(document);\r\n        this.video = document.getElementById(this.videoid);\r\n        this.canvas = document.getElementById(this.canvasid);\r\n        this.cmid = cmid;\r\n        this.quizid = quizid;\r\n        this.mainimage = mainimage;\r\n        this.attemptid = attemptid;\r\n        $(\"#id_submitbutton\").prop(\"disabled\", true);\r\n        docElement.on('popup', this.showpopup.bind(this));\r\n        setTimeout(navigator.mediaDevices.getUserMedia({video: true, audio: true})\r\n            .then(function(stream) {\r\n                if (this.video) {\r\n                  this.video.srcObject = stream;\r\n                  this.video.muted = true;\r\n                  localMediaStream = stream;\r\n                  this.video.play();\r\n                  return true;\r\n                }\r\n                return true;\r\n            })\r\n        .catch(function() {\r\n            // Console.log(err);\r\n        }), 10000);\r\n    };\r\n\r\n    /** @type Tag element contain video. */\r\n    Camera.prototype.video = false;\r\n    /** @type String video elemend id. */\r\n    Camera.prototype.videoid = 'video';\r\n    /** @type Tag element contain canvas. */\r\n    Camera.prototype.canvas = false;\r\n    /** @type String video elemend id. */\r\n    Camera.prototype.canvasid = 'canvas';\r\n    /** @type int width of canvas object. */\r\n    Camera.prototype.width = 320;\r\n    /** @type int width of canvas object. */\r\n    Camera.prototype.height = 240;\r\n    /** @type String element contain takepicture button. */\r\n    Camera.prototype.takepictureid = 'takepicture';\r\n    /** @type String element contain retake button. */\r\n    Camera.prototype.retakeid = 'retake';\r\n    /** @type int course module id. */\r\n    Camera.prototype.cmid = false;\r\n    /** @type bool whether a main image or compare against an image. */\r\n    Camera.prototype.mainimage = false;\r\n     /** @type int attempt id. */\r\n    Camera.prototype.attemptid = false;\r\n     /** @type int quiz id. */\r\n    Camera.prototype.quizid = false;\r\n\r\n\r\n    Camera.prototype.takepicture = function() {\r\n        // Console.log('takepicture function');\r\n        var context = this.canvas.getContext('2d');\r\n        context.drawImage(this.video, 0, 0, this.width, this.height);\r\n        var data = this.canvas.toDataURL('image/png');\r\n        $('#' + this.videoid).hide();\r\n        $('#' + this.takepictureid).hide();\r\n        $('#' + this.canvasid).show();\r\n        $('#' + this.retakeid).show();\r\n        $(\"input[name='userimg']\").val(data);\r\n        $(\"#id_submitbutton\").prop(\"disabled\", true);\r\n        $.ajax({\r\n            url: M.cfg.wwwroot + '/mod/quiz/accessrule/quizproctoring/ajax.php',\r\n            method: 'POST',\r\n            data: {imgBase64: data, cmid: this.cmid, attemptid: this.attemptid, mainimage: this.mainimage},\r\n            success: function(response) {\r\n                if (response && response.errorcode) {\r\n                    // Console.log(response.errorcode);\r\n                    $(\"input[name='userimg']\").val('');\r\n                    $(document).trigger('popup', response.error);\r\n                } else {\r\n                    $(\"#id_submitbutton\").prop(\"disabled\", false);\r\n                }\r\n            }\r\n        });\r\n    };\r\n    Camera.prototype.proctoringimage = function() {\r\n        // Console.log(this.cmid);\r\n        var context = this.canvas.getContext('2d');\r\n        context.drawImage(this.video, 0, 0, this.width, this.height);\r\n        var data = this.canvas.toDataURL('image/png');\r\n        $.ajax({\r\n            url: M.cfg.wwwroot + '/mod/quiz/accessrule/quizproctoring/ajax.php',\r\n            method: 'POST',\r\n            data: {imgBase64: data, cmid: this.cmid, attemptid: this.attemptid, mainimage: this.mainimage},\r\n            success: function(response) {\r\n                if (response && response.errorcode) {\r\n                    $(document).trigger('popup', response.error);\r\n                } else {\r\n                    if (response.redirect && response.url) {\r\n                        window.onbeforeunload = null;\r\n                        window.location.href = encodeURI(response.url);\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    };\r\n\r\n    var signalingSocket = null;\r\n    var localMediaStream = null;\r\n    var peers = {};\r\n    var peerId = null;\r\n    var peerMediaElements = {};\r\n    var connectedPeers = {};\r\n    var USE_AUDIO = true;\r\n    var USE_VIDEO = true;\r\n    var MUTE_AUDIO_BY_DEFAULT = true;\r\n    var attachMediaStream = null;\r\n    var stream = null;\r\n\r\n    var ICE_SERVERS = [{urls: \"stun:stun.l.google.com:19302\"}];\r\n\r\n    Camera.prototype.retake = function() {\r\n        $(\"input[name='userimg']\").val('');\r\n        $('#' + this.videoid).show(this.cmid);\r\n        $('#' + this.takepictureid).show();\r\n        $('#' + this.canvasid).hide();\r\n        $('#' + this.retakeid).hide();\r\n    };\r\n    Camera.prototype.showpopup = function(event, message) {\r\n        return ModalFactory.create({\r\n            body: message,\r\n        }).then(function(modal) {\r\n            modal.show();\r\n            return null;\r\n        });\r\n    };\r\n\r\n    var init = function(cmid, mainimage, verifyduringattempt = true, attemptid = null,\r\n        teacher, quizid, externalserver, serviceoption, setinterval = 300) {\r\n        if (!verifyduringattempt) {\r\n            var camera;\r\n            camera = new Camera(cmid, mainimage, attemptid, quizid);\r\n            // Take picture on button click\r\n            $('#' + camera.takepictureid).on('click', function(e) {\r\n                e.preventDefault();\r\n                camera.takepicture();\r\n            });\r\n            // Show video again when retake\r\n            $('#' + camera.retakeid).on('click', function(e) {\r\n                e.preventDefault();\r\n                camera.retake();\r\n            });\r\n        } else {\r\n            signalingSocket = io(externalserver);\r\n            signalingSocket.on('connect', function() {\r\n            // Retrieve the session state from localStorage\r\n            var storedSession = localStorage.getItem('sessionState');\r\n            var sessionState = storedSession ? JSON.parse(storedSession) : null;\r\n           setupLocalMedia(cmid, mainimage, verifyduringattempt, attemptid,\r\n            teacher, setinterval, serviceoption, quizid, function() {\r\n                // Once User gives access to mic/cam, join the channel and start peering up\r\n                var teacherroom = getTeacherroom();\r\n                var typet = {\"type\": (teacherroom === 'teacher') ? 'teacher' : 'student'};\r\n\r\n                signalingSocket.emit('join', {\"room\": quizid, \"userdata\": {'quizid': quizid, 'type': typet}});\r\n\r\n                // Restore the session state if available\r\n                if (sessionState) {\r\n                    restoreSessionState(sessionState);\r\n                }\r\n            });\r\n        });\r\n\r\n        signalingSocket.on('disconnect', function() {\r\n            /* Tear down all of our peer connections and remove all\r\n             * media divs when we disconnect */\r\n\r\n            for (peerId in peerMediaElements) {\r\n                peerMediaElements[peerId].remove();\r\n            }\r\n            for (peerId in peers) {\r\n                peers[peerId].close();\r\n            }\r\n\r\n            peers = {};\r\n            peerMediaElements = {};\r\n        });\r\n\r\n        signalingSocket.on('addPeer', function(config) {\r\n            var peerId = config.peer_id;\r\n\r\n            if (peerId in peers) {\r\n                return;\r\n            }\r\n\r\n            var peerConnection = new RTCPeerConnection(\r\n                {\"iceServers\": ICE_SERVERS},\r\n                {\"optional\": [{\"DtlsSrtpKeyAgreement\": true}]}\r\n            );\r\n            peers[peerId] = peerConnection;\r\n            // Add peer to the connectedPeers object\r\n            connectedPeers[peerId] = {\r\n                stream: new MediaStream()\r\n            };\r\n\r\n            peerConnection.onicecandidate = function(event) {\r\n                if (event.candidate) {\r\n                    signalingSocket.emit('relayICECandidate', {\r\n                        'peer_id': peerId,\r\n                        'ice_candidate': {\r\n                            'sdpMLineIndex': event.candidate.sdpMLineIndex,\r\n                            'candidate': event.candidate.candidate\r\n                        }\r\n                    });\r\n                }\r\n            };\r\n\r\n            peerConnection.ontrack = function(event) {\r\n\r\n                // Update connectedPeers stream\r\n                connectedPeers[peerId].stream.addTrack(event.track);\r\n                var remoteMedia;\r\n\r\n                if (peerMediaElements[peerId]) {\r\n                    remoteMedia = peerMediaElements[peerId];\r\n                } else {\r\n                    remoteMedia = USE_VIDEO ? $(\"<video>\") : $(\"<audio>\");\r\n                    remoteMedia.attr(\"autoplay\", \"autoplay\");\r\n                    remoteMedia.attr(\"muted\", \"true\");\r\n                    remoteMedia.attr(\"controls\", \"\");\r\n                    remoteMedia.attr(\"class\", \"quizaccess_quizproctoring\");\r\n\r\n                    if (MUTE_AUDIO_BY_DEFAULT) {\r\n                        remoteMedia.attr(\"muted\", \"true\");\r\n                    }\r\n                    remoteMedia.attr(\"controls\", \"\");\r\n                    peerMediaElements[peerId] = remoteMedia;\r\n                    var teacherroom = getTeacherroom();\r\n                    if (teacherroom === 'teacher') {\r\n                        $('#region-main-box').append(remoteMedia);\r\n                        attachMediaStream(remoteMedia[0], connectedPeers[peerId].stream);\r\n                    }\r\n                }\r\n            };\r\n            // Add our local stream\r\n            peerConnection.addStream(localMediaStream);\r\n\r\n            if (config.should_create_offer) {\r\n                peerConnection.createOffer(\r\n                    function(localDescription) {\r\n                        peerConnection.setLocalDescription(localDescription,\r\n                            function() {\r\n                                signalingSocket.emit('relaySessionDescription',\r\n                                    {'peer_id': peerId, 'session_description': localDescription});\r\n                            }\r\n                        );\r\n                    },\r\n                    function() {\r\n                        // Error handling will be implemented later\r\n                    }\r\n                );\r\n            }\r\n        });\r\n\r\n                /**\r\n                 * Peers exchange session descriptions which contains information\r\n                 * about their audio / video settings and that sort of stuff. First\r\n                 * the 'offerer' sends a description to the 'answerer' (with type\r\n                 * \"offer\"), then the answerer sends one back (with type \"answer\").\r\n                 */\r\n                signalingSocket.on('sessionDescription', function(config) {\r\n                    var peerId = config.peer_id;\r\n                    var peer = peers[peerId];\r\n                    var remoteDescription = config.session_description;\r\n                    var desc = new RTCSessionDescription(remoteDescription);\r\n                    peer.setRemoteDescription(desc)\r\n                    .then(function() {\r\n                        if (remoteDescription.type === \"offer\") {\r\n                            return peer.createAnswer();\r\n                        }\r\n                        return null;\r\n                    })\r\n                    .then(function(localDescription) {\r\n                        if (localDescription) {\r\n                            return peer.setLocalDescription(localDescription);\r\n                        }\r\n                        return null;\r\n                    })\r\n                    .then(function() {\r\n                        if (peer.localDescription) {\r\n                            signalingSocket.emit('relaySessionDescription', {\r\n                                'peer_id': peerId,\r\n                                'session_description': peer.localDescription\r\n                            });\r\n                        }\r\n                        return null;\r\n                    })\r\n                    .catch(function(error) {\r\n                        throw error;\r\n                    });\r\n                });\r\n\r\n                /**\r\n                 * The offerer will send a number of ICE Candidate blobs to the answerer so they\r\n                 * can begin trying to find the best path to one another on the net.\r\n                 */\r\n                signalingSocket.on('iceCandidate', function(config) {\r\n                    var peer = peers[config.peer_id];\r\n                    var iceCandidate = config.ice_candidate;\r\n                    peer.addIceCandidate(new RTCIceCandidate(iceCandidate));\r\n                });\r\n                /**\r\n                 * When a user leaves a channel (or is disconnected from the\r\n                 * signaling server) everyone will recieve a 'removePeer' message\r\n                 * telling them to trash the media channels they have open for those\r\n                 * that peer. If it was this client that left a channel, they'll also\r\n                 * receive the removePeers. If this client was disconnected, they\r\n                 * wont receive removePeers, but rather the\r\n                 * signalingSocket.on('disconnect') code will kick in and tear down\r\n                 * all the peer sessions.\r\n                 */\r\n                    signalingSocket.on('removePeer', function(config) {\r\n                    var peerId = config.peer_id;\r\n\r\n                    if (!(peerId in peers)) {\r\n                        return;\r\n                    }\r\n\r\n                    // Close the peer connection\r\n                    peers[peerId].removeStream(connectedPeers[peerId].stream);\r\n                    peers[peerId].close();\r\n\r\n                    // Remove the peer from connectedPeers\r\n                    delete connectedPeers[peerId];\r\n\r\n                    var remoteMedia = peerMediaElements[peerId];\r\n                    if (remoteMedia) {\r\n                        remoteMedia.remove();\r\n                    }\r\n                    // Remove references\r\n                    delete peers[peerId];\r\n                    delete peerMediaElements[peerId];\r\n                });\r\n    }\r\n\r\n    };\r\n    return {\r\n        init: init\r\n    };\r\n\r\n    /**\r\n     * Setup Local Media\r\n     *\r\n     * @param {int} cmid - cmid\r\n     * @param {boolean} mainimage - boolean value\r\n     * @param {boolean} verifyduringattempt - boolean value\r\n     * @param {int} attemptid - Attempt Id\r\n     * @param {boolean} teacher - boolean value\r\n     * @param {bigint} setinterval - int value\r\n     * @param {Longtext} serviceoption - string value\r\n     * @param {int} quizid - int value\r\n     * @param {function} callback - The callback function to execute after setting up the media stream.\r\n     * @return {void}\r\n     */\r\n    function setupLocalMedia(cmid, mainimage, verifyduringattempt, attemptid,\r\n        teacher, setinterval, serviceoption, quizid, callback) {\r\n        require(['core/ajax'], function() {\r\n            if (localMediaStream !== null) {\r\n                if (callback) {\r\n                    callback();\r\n                }\r\n                return;\r\n            }\r\n\r\n            navigator.getUserMedia = (\r\n                navigator.getUserMedia ||\r\n                navigator.webkitGetUserMedia ||\r\n                navigator.mozGetUserMedia ||\r\n                navigator.msGetUserMedia\r\n            );\r\n\r\n            attachMediaStream = function(element, stream) {\r\n                element.srcObject = stream;\r\n            };\r\n\r\n            navigator.mediaDevices.getUserMedia({\"audio\": USE_AUDIO, \"video\": USE_VIDEO})\r\n                .then(function(stream) {\r\n                    localMediaStream = stream;\r\n                    if (verifyduringattempt) {\r\n                        var teacherroom = getTeacherroom();\r\n                        if (teacherroom !== 'teacher') {\r\n                            $('<canvas>').attr({id: 'canvas', width: '280',\r\n                                height: '240', 'style': 'display: none;'}).appendTo('body');\r\n                            $('<video>').attr({\r\n                                'id': 'video',\r\n                                'class': 'quizaccess_quizproctoring-video',\r\n                                'width': '280',\r\n                                'height': '240',\r\n                                'autoplay': 'autoplay'\r\n                            }).appendTo('body');\r\n                            var camera = new Camera(cmid, mainimage, attemptid, quizid);\r\n                            setInterval(camera.proctoringimage.bind(camera), setinterval * 1000);\r\n                        }\r\n                    }\r\n                    return stream;\r\n                })\r\n                .catch(function(error) {\r\n                    throw error; // Rethrow the error to propagate it further\r\n                })\r\n                .finally(function() {\r\n                    if (callback) {\r\n                        callback();\r\n                    }\r\n                });\r\n        });\r\n    }\r\n\r\n\r\n\r\n    /**\r\n     * Get Teacher room\r\n     *\r\n     * @return {string} teacher\r\n     */\r\n    function getTeacherroom() {\r\n        var urlParams = new URLSearchParams(window.location.search);\r\n        var teacher = urlParams.get('teacher');\r\n        return teacher;\r\n    }\r\n\r\n    /**\r\n     * RestoreSessionState\r\n     *\r\n     * @param {Longtext} sessionState sessionState\r\n     */\r\n    function restoreSessionState(sessionState) {\r\n    for (var peerId in sessionState.connectedPeers) {\r\n        (function(peerId) {\r\n            var peer = sessionState.connectedPeers[peerId];\r\n\r\n            // Create RTCPeerConnection and add track\r\n            var peerConnection = new RTCPeerConnection(\r\n                {\"iceServers\": ICE_SERVERS},\r\n                {\"optional\": [{\"DtlsSrtpKeyAgreement\": true}]}\r\n            );\r\n\r\n            peers[peerId] = peerConnection;\r\n\r\n            peerConnection.onicecandidate = function(event) {\r\n                if (event.candidate) {\r\n                    signalingSocket.emit('relayICECandidate', {\r\n                        'peer_id': peerId,\r\n                        'ice_candidate': {\r\n                            'sdpMLineIndex': event.candidate.sdpMLineIndex,\r\n                            'candidate': event.candidate.candidate\r\n                        }\r\n                    });\r\n                }\r\n            };\r\n\r\n            peerConnection.ontrack = function(event) {\r\n                // Update connectedPeers stream\r\n                peer.stream.addTrack(event.track);\r\n\r\n                var remoteMedia;\r\n\r\n                if (peerMediaElements[peerId]) {\r\n                    remoteMedia = peerMediaElements[peerId];\r\n                } else {\r\n                    remoteMedia = USE_VIDEO ? $(\"<video>\") : $(\"<audio>\");\r\n                    remoteMedia.attr(\"autoplay\", \"autoplay\");\r\n\r\n                    if (MUTE_AUDIO_BY_DEFAULT) {\r\n                        remoteMedia.attr(\"muted\", \"true\");\r\n                    }\r\n                    remoteMedia.attr(\"controls\", \"\");\r\n                    peerMediaElements[peerId] = remoteMedia;\r\n                    var teacherroom = getTeacherroom();\r\n                    if (teacherroom === 'teacher') {\r\n                        $('#region-main-box').append(remoteMedia);\r\n                        attachMediaStream(remoteMedia[0], stream);\r\n                    }\r\n                }\r\n                attachMediaStream(remoteMedia[0], peer.stream);\r\n            };\r\n\r\n            // Add our local stream\r\n            peerConnection.addStream(localMediaStream);\r\n\r\n            // Add existing tracks to the new connection\r\n            for (var track of peer.stream.getTracks()) {\r\n                peerConnection.addTrack(track, peer.stream);\r\n            }\r\n\r\n            // Create an offer\r\n            peerConnection.createOffer(\r\n                function(localDescription) {\r\n                    peerConnection.setLocalDescription(localDescription,\r\n                        function() {\r\n                            signalingSocket.emit('relaySessionDescription', {\r\n                                'peer_id': peerId,\r\n                                'session_description': localDescription\r\n                            });\r\n                        }\r\n                    );\r\n                });\r\n        })(peerId, peers, signalingSocket, peerMediaElements, attachMediaStream, localMediaStream);\r\n    }\r\n}\r\n});\r\n"],"names":["window","addEventListener","event","stopImmediatePropagation","returnValue","define","$","str","ModalFactory","Camera","cmid","mainimage","attemptid","quizid","docElement","document","video","getElementById","this","videoid","canvas","canvasid","prop","on","showpopup","bind","setTimeout","navigator","mediaDevices","getUserMedia","audio","then","stream","srcObject","muted","localMediaStream","play","catch","prototype","width","height","takepictureid","retakeid","takepicture","getContext","drawImage","data","toDataURL","hide","show","val","ajax","url","M","cfg","wwwroot","method","imgBase64","success","response","errorcode","trigger","error","proctoringimage","redirect","onbeforeunload","location","href","encodeURI","signalingSocket","peers","peerId","peerMediaElements","connectedPeers","attachMediaStream","ICE_SERVERS","urls","retake","message","create","body","modal","init","verifyduringattempt","teacher","externalserver","serviceoption","setinterval","camera","io","storedSession","localStorage","getItem","sessionState","JSON","parse","setupLocalMedia","typet","getTeacherroom","emit","restoreSessionState","remove","close","config","peer_id","peerConnection","RTCPeerConnection","MediaStream","onicecandidate","candidate","sdpMLineIndex","ontrack","remoteMedia","addTrack","track","attr","append","addStream","should_create_offer","createOffer","localDescription","setLocalDescription","peer","remoteDescription","session_description","desc","RTCSessionDescription","setRemoteDescription","type","createAnswer","iceCandidate","ice_candidate","addIceCandidate","RTCIceCandidate","removeStream","e","preventDefault","callback","require","webkitGetUserMedia","mozGetUserMedia","msGetUserMedia","element","id","appendTo","setInterval","finally","URLSearchParams","search","get","getTracks"],"mappings":"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"}