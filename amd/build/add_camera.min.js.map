{"version":3,"file":"add_camera.min.js","sources":["../src/add_camera.js"],"sourcesContent":["/**\r\n * JavaScript class for Camera\r\n *\r\n * @subpackage quizproctoring\r\n * @copyright  2020 Mahendra Soni <ms@taketwotechnologies.com> {@link https://taketwotechnologies.com}\r\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n */\r\nwindow.addEventListener('beforeunload', function(event) {\r\n    event.stopImmediatePropagation();\r\n    event.returnValue = '';\r\n});\r\ndefine(['jquery', 'core/str', 'core/modal_factory', 'core/ajax'],\r\nfunction($, str, ModalFactory) {\r\n    var Camera = function(cmid, mainimage = false, attemptid = null, quizid) {\r\n        var docElement = $(document);\r\n        this.video = document.getElementById(this.videoid);\r\n        this.canvas = document.getElementById(this.canvasid);\r\n        this.cmid = cmid;\r\n        this.quizid = quizid;\r\n        this.mainimage = mainimage;\r\n        this.attemptid = attemptid;\r\n        $(\"#id_submitbutton\").prop(\"disabled\", true);\r\n        docElement.on('popup', this.showpopup.bind(this));\r\n        setTimeout(navigator.mediaDevices.getUserMedia({video: true, audio: true})\r\n            .then(function(stream) {\r\n                if (this.video) {\r\n                  this.video.srcObject = stream;\r\n                  this.video.muted = true;\r\n                  localMediaStream = stream;\r\n                  this.video.play();\r\n                  return true;\r\n                }\r\n                return true;\r\n            })\r\n        .catch(function() {\r\n            // Console.log(err);\r\n        }), 10000);\r\n    };\r\n\r\n    /** @type Tag element contain video. */\r\n    Camera.prototype.video = false;\r\n    /** @type String video elemend id. */\r\n    Camera.prototype.videoid = 'video';\r\n    /** @type Tag element contain canvas. */\r\n    Camera.prototype.canvas = false;\r\n    /** @type String video elemend id. */\r\n    Camera.prototype.canvasid = 'canvas';\r\n    /** @type int width of canvas object. */\r\n    Camera.prototype.width = 320;\r\n    /** @type int width of canvas object. */\r\n    Camera.prototype.height = 240;\r\n    /** @type String element contain takepicture button. */\r\n    Camera.prototype.takepictureid = 'takepicture';\r\n    /** @type String element contain retake button. */\r\n    Camera.prototype.retakeid = 'retake';\r\n    /** @type int course module id. */\r\n    Camera.prototype.cmid = false;\r\n    /** @type bool whether a main image or compare against an image. */\r\n    Camera.prototype.mainimage = false;\r\n     /** @type int attempt id. */\r\n    Camera.prototype.attemptid = false;\r\n     /** @type int quiz id. */\r\n    Camera.prototype.quizid = false;\r\n\r\n    Camera.prototype.takepicture = function() {\r\n        // Console.log('takepicture function');\r\n        var context = this.canvas.getContext('2d');\r\n        context.drawImage(this.video, 0, 0, this.width, this.height);\r\n        var data = this.canvas.toDataURL('image/png');\r\n        $('#' + this.videoid).hide();\r\n        $('#' + this.takepictureid).hide();\r\n        $('#' + this.canvasid).show();\r\n        $('#' + this.retakeid).show();\r\n        $(\"input[name='userimg']\").val(data);\r\n        $(\"#id_submitbutton\").prop(\"disabled\", true);\r\n        $.ajax({\r\n            url: M.cfg.wwwroot + '/mod/quiz/accessrule/quizproctoring/ajax.php',\r\n            method: 'POST',\r\n            data: {imgBase64: data, cmid: this.cmid, attemptid: this.attemptid, mainimage: this.mainimage},\r\n            success: function(response) {\r\n                if (response && response.errorcode) {\r\n                    // Console.log(response.errorcode);\r\n                    $(\"input[name='userimg']\").val('');\r\n                    $(document).trigger('popup', response.error);\r\n                } else {\r\n                    $(\"#id_submitbutton\").prop(\"disabled\", false);\r\n                }\r\n            }\r\n        });\r\n    };\r\n    Camera.prototype.proctoringimage = function() {\r\n        // Console.log(this.cmid);\r\n        var context = this.canvas.getContext('2d');\r\n        context.drawImage(this.video, 0, 0, this.width, this.height);\r\n        var data = this.canvas.toDataURL('image/png');\r\n        $.ajax({\r\n            url: M.cfg.wwwroot + '/mod/quiz/accessrule/quizproctoring/ajax.php',\r\n            method: 'POST',\r\n            data: {imgBase64: data, cmid: this.cmid, attemptid: this.attemptid, mainimage: this.mainimage},\r\n            success: function(response) {\r\n                if (response && response.errorcode) {\r\n                    $(document).trigger('popup', response.error);\r\n                } else {\r\n                    if (response.redirect && response.url) {\r\n                        window.onbeforeunload = null;\r\n                        window.location.href = encodeURI(response.url);\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    };\r\n\r\n    var signalingSocket = null;\r\n    var localMediaStream = null;\r\n    var peers = {};\r\n    var peerId = null;\r\n    var peer_media_elements = {};\r\n    var connectedPeers = {};\r\n    var USE_AUDIO = true;\r\n    var USE_VIDEO = true;\r\n    var MUTE_AUDIO_BY_DEFAULT = true;\r\n\r\n    var ICE_SERVERS = [{urls: \"stun:stun.l.google.com:19302\"}];\r\n\r\n    Camera.prototype.retake = function() {\r\n        $(\"input[name='userimg']\").val('');\r\n        $('#' + this.videoid).show(this.cmid);\r\n        $('#' + this.takepictureid).show();\r\n        $('#' + this.canvasid).hide();\r\n        $('#' + this.retakeid).hide();\r\n    };\r\n    Camera.prototype.showpopup = function(event, message) {\r\n        return ModalFactory.create({\r\n            body: message,\r\n        }).then(function(modal) {\r\n            modal.show();\r\n            return null;\r\n        });\r\n    };\r\n\r\n    var init = function(cmid, mainimage, verifyduringattempt = true, attemptid = null,\r\n        teacher, quizid, externalserver, serviceoption, setinterval = 300) {\r\n        if (!verifyduringattempt) {\r\n            var camera;\r\n            camera = new Camera(cmid, mainimage, attemptid, quizid);\r\n            // Take picture on button click\r\n            $('#' + camera.takepictureid).on('click', function(e) {\r\n                e.preventDefault();\r\n                camera.takepicture();\r\n            });\r\n            // Show video again when retake\r\n            $('#' + camera.retakeid).on('click', function(e) {\r\n                e.preventDefault();\r\n                camera.retake();\r\n            });\r\n        } else {\r\n            signalingSocket = io(externalserver);\r\n            signalingSocket.on('connect', function() {\r\n            // Retrieve the session state from localStorage\r\n            var storedSession = localStorage.getItem('sessionState');\r\n            var sessionState = storedSession ? JSON.parse(storedSession) : null;            \r\n           setupLocalMedia(cmid, mainimage, verifyduringattempt, attemptid,\r\n            teacher, setinterval, serviceoption, quizid, function() {\r\n                // Once User gives access to mic/cam, join the channel and start peering up\r\n                var room = getRoomFromQuery(quizid);\r\n                var teacherroom = getTeacherroom();\r\n                var typet = {\"type\": (teacherroom === 'teacher') ? 'teacher' : 'student'};\r\n\r\n                joinchatChannel(room, {'quizid': quizid, 'type': typet});\r\n\r\n                // Restore the session state if available\r\n                if (sessionState) {\r\n                    restoreSessionState(sessionState);\r\n                }\r\n            });\r\n        });\r\n\r\n        signalingSocket.on('disconnect', function() {\r\n            /* Tear down all of our peer connections and remove all\r\n             * media divs when we disconnect */\r\n\r\n            for (peerId in peer_media_elements) {\r\n                peer_media_elements[peerId].remove();\r\n            }\r\n            for (peerId in peers) {\r\n                peers[peerId].close();\r\n            }\r\n\r\n            peers = {};\r\n            peer_media_elements = {};\r\n        });\r\n\r\n        signalingSocket.on('addPeer', function(config) {\r\n            var peerId = config.peerId;\r\n\r\n            if (peerId in peers) {\r\n                return;\r\n            }\r\n\r\n            var peerConnection = new RTCPeerConnection(\r\n                {\"iceServers\": ICE_SERVERS},\r\n                {\"optional\": [{\"DtlsSrtpKeyAgreement\": true}]}\r\n            );\r\n            peers[peerId] = peerConnection;\r\n\r\n            // Add peer to the connectedPeers object\r\n            connectedPeers[peerId] = {\r\n                stream: new MediaStream()\r\n            };\r\n\r\n            peerConnection.onicecandidate = function(event) {\r\n                if (event.candidate) {\r\n                    signalingSocket.emit('relayICECandidate', {\r\n                        'peerId': peerId,\r\n                        'ice_candidate': {\r\n                            'sdpMLineIndex': event.candidate.sdpMLineIndex,\r\n                            'candidate': event.candidate.candidate\r\n                        }\r\n                    });\r\n                }\r\n            };\r\n\r\n            peerConnection.ontrack = function(event) {\r\n\r\n                // Update connectedPeers stream\r\n                connectedPeers[peerId].stream.addTrack(event.track);\r\n                var remoteMedia;\r\n\r\n                if (peer_media_elements[peerId]) {\r\n                    remoteMedia = peer_media_elements[peerId];\r\n                } else {\r\n                    remoteMedia = USE_VIDEO ? $(\"<video>\") : $(\"<audio>\");\r\n                    remoteMedia.attr(\"autoplay\", \"autoplay\");\r\n                    remoteMedia.attr(\"muted\", \"true\");\r\n                    remoteMedia.attr(\"controls\", \"\");\r\n                    remoteMedia.attr(\"class\", \"quizaccess_quizproctoring\");\r\n\r\n                    if (MUTE_AUDIO_BY_DEFAULT) {\r\n                        remoteMedia.attr(\"muted\", \"true\");\r\n                    }\r\n                    remoteMedia.attr(\"controls\", \"\");\r\n                    peer_media_elements[peerId] = remoteMedia;\r\n                    var teacherroom = getTeacherroom();\r\n                    if (teacherroom === 'teacher') {\r\n                        $('#region-main-box').append(remoteMedia);\r\n                        attachMediaStream(remoteMedia[0], connectedPeers[peerId].stream);\r\n                    }\r\n                }\r\n            };\r\n\r\n            // Add our local stream\r\n            peerConnection.addStream(localMediaStream);\r\n\r\n            if (config.should_create_offer) {\r\n                peerConnection.createOffer(\r\n                    function(localDescription) {\r\n                        peerConnection.setLocalDescription(localDescription,\r\n                            function() {\r\n                                signalingSocket.emit('relaySessionDescription',\r\n                                    {'peerId': peerId, 'session_description': localDescription});\r\n                            },\r\n                            function() { \r\n                                alert(\"Offer setLocalDescription failed!\");\r\n                            }\r\n                        );\r\n                    },\r\n                    function(error) {\r\n                    }\r\n                );\r\n            }\r\n        });\r\n\r\n                 /** \r\n                 * Peers exchange session descriptions which contains information\r\n                 * about their audio / video settings and that sort of stuff. First\r\n                 * the 'offerer' sends a description to the 'answerer' (with type\r\n                 * \"offer\"), then the answerer sends one back (with type \"answer\").  \r\n                 */\r\n                signalingSocket.on('sessionDescription', function(config) {\r\n                    console.log('Remote description received: ', config);\r\n                    var peerId = config.peerId;\r\n                    var peer = peers[peerId];\r\n                    var remote_description = config.session_description;\r\n                    var desc = new RTCSessionDescription(remote_description);\r\n                    var stuff = peer.setRemoteDescription(desc,\r\n                        function() {\r\n                            if (remote_description.type == \"offer\") {\r\n                                peer.createAnswer(\r\n                                    function(localDescription) {\r\n                                        console.log(\"Answer description is: \", localDescription);\r\n                                        peer.setLocalDescription(localDescription,\r\n                                            function() { \r\n                                                signalingSocket.emit('relaySessionDescription', \r\n                                                    {'peerId': peerId, 'session_description': localDescription});\r\n                                            },\r\n                                            function() {\r\n                                                alert(\"Answer setLocalDescription failed!\");\r\n                                            }\r\n                                        );\r\n                                    },\r\n                                    function(error) {\r\n                                    });\r\n                            }\r\n                        },\r\n                        function(error) {\r\n                        }\r\n                    );\r\n                });\r\n\r\n                /**\r\n                 * The offerer will send a number of ICE Candidate blobs to the answerer so they \r\n                 * can begin trying to find the best path to one another on the net.\r\n                 */\r\n                signalingSocket.on('iceCandidate', function(config) {\r\n                    var peer = peers[config.peerId];\r\n                    var ice_candidate = config.ice_candidate;\r\n                    peer.addIceCandidate(new RTCIceCandidate(ice_candidate));\r\n                });\r\n                /**\r\n                 * When a user leaves a channel (or is disconnected from the\r\n                 * signaling server) everyone will recieve a 'removePeer' message\r\n                 * telling them to trash the media channels they have open for those\r\n                 * that peer. If it was this client that left a channel, they'll also\r\n                 * receive the removePeers. If this client was disconnected, they\r\n                 * wont receive removePeers, but rather the\r\n                 * signalingSocket.on('disconnect') code will kick in and tear down\r\n                 * all the peer sessions.\r\n                 */\r\n                signalingSocket.on('removePeer', function (config) {\r\n                    console.log('Signaling server said to remove peer:', config);\r\n                    var peerId = config.peerId;\r\n\r\n                    if (!(peerId in peers)) {\r\n                        return;\r\n                    }\r\n\r\n                    // Close the peer connection\r\n                    peers[peerId].removeStream(connectedPeers[peerId].stream);\r\n                    peers[peerId].close();\r\n\r\n                    // Remove the peer from connectedPeers\r\n                    delete connectedPeers[peerId];\r\n\r\n                    var remoteMedia = peer_media_elements[peerId];\r\n                    if (remoteMedia) {\r\n                        remoteMedia.remove();\r\n                        adjustLayout();\r\n                    }\r\n                    // Remove references\r\n                    delete peers[peerId];\r\n                    delete peer_media_elements[peerId];\r\n                });\r\n\r\n                 // Function to adjust the layout after removing a video element\r\n                function adjustLayout() {\r\n                    var videosContainer = $('#region-main');\r\n                    var videoElements = videosContainer.children('video');\r\n                    var totalVideos = videoElements.length;\r\n\r\n                    // Adjust the layout based on the total number of videos\r\n                    if (totalVideos > 1) {\r\n                        // For example, distribute the videos evenly in rows and columns\r\n                        var rows = Math.ceil(Math.sqrt(totalVideos));\r\n                        var cols = Math.ceil(totalVideos / rows);\r\n\r\n                        videoElements.each(function(index) {\r\n                            var row = Math.floor(index / cols);\r\n                            var col = index % cols;\r\n\r\n                            $(this).css({\r\n                                'position': 'absolute',\r\n                                'top': (row * 240) + 'px', // Adjust based on your video height\r\n                                'left': (col * 320) + 'px' // Adjust based on your video width\r\n                            });\r\n                        });\r\n                    } \r\n                }\r\n\r\n        function restoreSessionState(sessionState) {\r\n            for (var peerId in sessionState.connectedPeers) {\r\n                var peer = sessionState.connectedPeers[peerId];\r\n\r\n                // Create RTCPeerConnection and add track\r\n                var peerConnection = new RTCPeerConnection(\r\n                    { \"iceServers\": ICE_SERVERS },\r\n                    { \"optional\": [{ \"DtlsSrtpKeyAgreement\": true }] }\r\n                );\r\n\r\n                peers[peerId] = peerConnection;\r\n\r\n                peerConnection.onicecandidate = function (event) {\r\n                    if (event.candidate) {\r\n                        signalingSocket.emit('relayICECandidate', {\r\n                            'peerId': peerId,\r\n                            'ice_candidate': {\r\n                                'sdpMLineIndex': event.candidate.sdpMLineIndex,\r\n                                'candidate': event.candidate.candidate\r\n                            }\r\n                        });\r\n                    }\r\n                };\r\n\r\n                peerConnection.ontrack = function (event) {\r\n                    // Update connectedPeers stream\r\n                    peer.stream.addTrack(event.track);\r\n\r\n                    var remoteMedia;\r\n\r\n                    if (peer_media_elements[peerId]) {\r\n                        remoteMedia = peer_media_elements[peerId];\r\n                    } else {\r\n                        remoteMedia = USE_VIDEO ? $(\"<video>\") : $(\"<audio>\");\r\n                        remoteMedia.attr(\"autoplay\", \"autoplay\");\r\n\r\n                        if (MUTE_AUDIO_BY_DEFAULT) {\r\n                            remoteMedia.attr(\"muted\", \"true\");\r\n                        }\r\n                        remoteMedia.attr(\"controls\", \"\");\r\n                        peer_media_elements[peerId] = remoteMedia;\r\n                        var teacherroom = getTeacherroom();\r\n                        if (teacherroom === 'teacher') {\r\n                            $('#region-main-box').append(remoteMedia);\r\n                            attachMediaStream(remoteMedia[0], stream);\r\n                        }\r\n                    }\r\n                    attachMediaStream(remoteMedia[0], peer.stream);\r\n                };\r\n\r\n                // Add our local stream\r\n                peerConnection.addStream(localMediaStream);\r\n\r\n                // Add existing tracks to the new connection\r\n                for (var track of peer.stream.getTracks()) {\r\n                    peerConnection.addTrack(track, peer.stream);\r\n                }\r\n\r\n                // Create an offer\r\n                peerConnection.createOffer(\r\n                    function(localDescription) {\r\n                        peerConnection.setLocalDescription(localDescription,\r\n                            function() {\r\n                                signalingSocket.emit('relaySessionDescription',\r\n                                    { 'peerId': peerId, 'session_description': localDescription});\r\n                            }\r\n                        );\r\n                    }\r\n                );\r\n            }\r\n        }\r\n    }\r\n\r\n    };\r\n    return {\r\n        init: init\r\n    };\r\n\r\n    /**\r\n     * Function setupLocalMedia\r\n     * @param int cmid.\r\n     * @param string mainimage.\r\n     * @param boolean verifyduringattempt.\r\n     * @param int attemptid.\r\n     * @param string teacher.\r\n     * @param string setinterval.\r\n     * @param string serviceoption.\r\n     * @param int quizid.\r\n     * @return\r\n     */\r\n     function setupLocalMedia(cmid, mainimage, verifyduringattempt, attemptid,\r\n        teacher, setinterval, serviceoption, quizid) {\r\n        require(['core/ajax'], function() {\r\n        if (localMediaStream !== null) {\r\n            return;\r\n        }\r\n\r\n        navigator.getUserMedia = (\r\n               navigator.getUserMedia ||\r\n               navigator.webkitGetUserMedia ||\r\n               navigator.mozGetUserMedia ||\r\n               navigator.msGetUserMedia);\r\n\r\n        attachMediaStream = function(element, stream) {\r\n            element.srcObject = stream;\r\n         };\r\n\r\n            navigator.mediaDevices.getUserMedia({\"audio\": USE_AUDIO, \"video\": USE_VIDEO})\r\n            .then(function(stream) {\r\n                localMediaStream = stream;\r\n                var camera;\r\n                var warning = 0;\r\n                if (verifyduringattempt) {\r\n                    var teacherroom = getTeacherroom();\r\n                    if (teacherroom !== 'teacher') {\r\n                        $('<canvas>').attr({id: 'canvas', width: '280', height: '240', 'style': 'display: none;'}).appendTo('body');\r\n                        $('<video>').attr({\r\n                            'id': 'video',\r\n                            'class': 'quizaccess_quizproctoring-video',\r\n                            'width': '280',\r\n                            'height': '240',\r\n                            'autoplay': 'autoplay'}).appendTo('body');\r\n                        camera = new Camera(cmid, mainimage, attemptid, quizid);\r\n                        setInterval(camera.proctoringimage.bind(camera), setinterval * 1000);\r\n                    }\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * get Room From Query\r\n     * @param int room.\r\n     * @return int\r\n     */\r\n    function getRoomFromQuery(room) {\r\n        return room;\r\n    }\r\n\r\n    /**\r\n     * get Teacher room\r\n     * @return string\r\n     */\r\n    function getTeacherroom() {\r\n        var urlParams = new URLSearchParams(window.location.search);\r\n        var teacher = urlParams.get('teacher');\r\n        return teacher;\r\n    }\r\n\r\n    /**\r\n     * join chat Channel\r\n     * @param {int} room.\r\n     * @param {array} userdata.\r\n     */\r\n    function joinchatChannel(room, userdata) {\r\n        signalingSocket.emit('join', {\"room\": room, \"userdata\": userdata});\r\n    }\r\n});\r\n"],"names":["window","addEventListener","event","stopImmediatePropagation","returnValue","define","$","str","ModalFactory","Camera","cmid","mainimage","attemptid","quizid","docElement","document","video","getElementById","this","videoid","canvas","canvasid","prop","on","showpopup","bind","setTimeout","navigator","mediaDevices","getUserMedia","audio","then","stream","srcObject","muted","localMediaStream","play","catch","prototype","width","height","takepictureid","retakeid","takepicture","getContext","drawImage","data","toDataURL","hide","show","val","ajax","url","M","cfg","wwwroot","method","imgBase64","success","response","errorcode","trigger","error","proctoringimage","redirect","onbeforeunload","location","href","encodeURI","signalingSocket","peers","peerId","peer_media_elements","connectedPeers","ICE_SERVERS","urls","retake","message","create","body","modal","init","verifyduringattempt","teacher","externalserver","serviceoption","setinterval","adjustLayout","videoElements","children","totalVideos","length","rows","Math","ceil","sqrt","cols","each","index","row","floor","col","css","io","storedSession","localStorage","getItem","JSON","parse","setupLocalMedia","remove","close","config","peerConnection","RTCPeerConnection","MediaStream","onicecandidate","candidate","emit","sdpMLineIndex","ontrack","remoteMedia","addTrack","track","attr","getTeacherroom","append","attachMediaStream","addStream","should_create_offer","createOffer","localDescription","setLocalDescription","alert","console","log","peer","remote_description","session_description","desc","RTCSessionDescription","setRemoteDescription","type","createAnswer","ice_candidate","addIceCandidate","RTCIceCandidate","removeStream","camera","e","preventDefault","require","webkitGetUserMedia","mozGetUserMedia","msGetUserMedia","element","id","appendTo","setInterval","URLSearchParams","search","get"],"mappings":"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"}