{"version":3,"file":"add_camera.min.js","sources":["../src/add_camera.js"],"sourcesContent":["/**\r\n * JavaScript class for Camera\r\n *\r\n * @subpackage quizproctoring\r\n * @copyright  2020 Mahendra Soni <ms@taketwotechnologies.com> {@link https://taketwotechnologies.com}\r\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n */\r\nwindow.addEventListener('beforeunload', function(event) {\r\n    event.stopImmediatePropagation();\r\n    event.returnValue = '';\r\n});\r\ndefine(['jquery', 'core/str', 'core/modal_factory', 'core/ajax'],\r\nfunction($, str, ModalFactory) {\r\n    var Camera = function(cmid, mainimage = false, attemptid = null, quizid) {\r\n        var docElement = $(document);\r\n        this.video = document.getElementById(this.videoid);\r\n        this.canvas = document.getElementById(this.canvasid);\r\n        this.cmid = cmid;\r\n        this.quizid = quizid;\r\n        this.mainimage = mainimage;\r\n        this.attemptid = attemptid;\r\n        $(\"#id_submitbutton\").prop(\"disabled\", true);\r\n        docElement.on('popup', this.showpopup.bind(this));\r\n        setTimeout(navigator.mediaDevices.getUserMedia({video: true, audio: true})\r\n            .then(function(stream) {\r\n                if (this.video) {\r\n                  this.video.srcObject = stream;\r\n                  this.video.muted = true;\r\n                  local_media_stream = stream;\r\n                  this.video.play();\r\n                  return true;\r\n                }\r\n                return true;\r\n            })\r\n        .catch(function() {\r\n            // Console.log(err);\r\n        }), 10000);\r\n    };\r\n\r\n    /** @type Tag element contain video. */\r\n    Camera.prototype.video = false;\r\n    /** @type String video elemend id. */\r\n    Camera.prototype.videoid = 'video';\r\n    /** @type Tag element contain canvas. */\r\n    Camera.prototype.canvas = false;\r\n    /** @type String video elemend id. */\r\n    Camera.prototype.canvasid = 'canvas';\r\n    /** @type int width of canvas object. */\r\n    Camera.prototype.width = 320;\r\n    /** @type int width of canvas object. */\r\n    Camera.prototype.height = 240;\r\n    /** @type String element contain takepicture button. */\r\n    Camera.prototype.takepictureid = 'takepicture';\r\n    /** @type String element contain retake button. */\r\n    Camera.prototype.retakeid = 'retake';\r\n    /** @type int course module id. */\r\n    Camera.prototype.cmid = false;\r\n    /** @type bool whether a main image or compare against an image. */\r\n    Camera.prototype.mainimage = false;\r\n     /** @type int attempt id. */\r\n    Camera.prototype.attemptid = false;\r\n     /** @type int quiz id. */\r\n    Camera.prototype.quizid = false;\r\n\r\n    Camera.prototype.takepicture = function() {\r\n        // Console.log('takepicture function');\r\n        var context = this.canvas.getContext('2d');\r\n        context.drawImage(this.video, 0, 0, this.width, this.height);\r\n        var data = this.canvas.toDataURL('image/png');\r\n        $('#' + this.videoid).hide();\r\n        $('#' + this.takepictureid).hide();\r\n        $('#' + this.canvasid).show();\r\n        $('#' + this.retakeid).show();\r\n        $(\"input[name='userimg']\").val(data);\r\n        $(\"#id_submitbutton\").prop(\"disabled\", true);\r\n        $.ajax({\r\n            url: M.cfg.wwwroot + '/mod/quiz/accessrule/quizproctoring/ajax.php',\r\n            method: 'POST',\r\n            data: {imgBase64: data, cmid: this.cmid, attemptid: this.attemptid, mainimage: this.mainimage},\r\n            success: function(response) {\r\n                if (response && response.errorcode) {\r\n                    // Console.log(response.errorcode);\r\n                    $(\"input[name='userimg']\").val('');\r\n                    $(document).trigger('popup', response.error);\r\n                } else {\r\n                    $(\"#id_submitbutton\").prop(\"disabled\", false);\r\n                }\r\n            }\r\n        });\r\n    };\r\n    Camera.prototype.proctoringimage = function() {\r\n        // Console.log(this.cmid);\r\n        var context = this.canvas.getContext('2d');\r\n        context.drawImage(this.video, 0, 0, this.width, this.height);\r\n        var data = this.canvas.toDataURL('image/png');\r\n        $.ajax({\r\n            url: M.cfg.wwwroot + '/mod/quiz/accessrule/quizproctoring/ajax.php',\r\n            method: 'POST',\r\n            data: {imgBase64: data, cmid: this.cmid, attemptid: this.attemptid, mainimage: this.mainimage},\r\n            success: function(response) {\r\n                if (response && response.errorcode) {\r\n                    $(document).trigger('popup', response.error);\r\n                } else {\r\n                    if (response.redirect && response.url) {\r\n                        window.onbeforeunload = null;\r\n                        window.location.href = encodeURI(response.url);\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    };\r\n\r\n    var signaling_socket = null;\r\n    var local_media_stream = null;\r\n    var peers = {};\r\n    var peer_id = null;\r\n    var peer_media_elements = {};\r\n    var connectedPeers = {};\r\n    var recordRTC;\r\n    \r\n    var USE_AUDIO = true;\r\n    var USE_VIDEO = true;\r\n    var MUTE_AUDIO_BY_DEFAULT = true;\r\n\r\n    var ICE_SERVERS = [{urls: \"stun:stun.l.google.com:19302\"}];\r\n\r\n    Camera.prototype.retake = function() {\r\n        $(\"input[name='userimg']\").val('');\r\n        $('#' + this.videoid).show(this.cmid);\r\n        $('#' + this.takepictureid).show();\r\n        $('#' + this.canvasid).hide();\r\n        $('#' + this.retakeid).hide();\r\n    };\r\n    Camera.prototype.showpopup = function(event, message) {\r\n        return ModalFactory.create({\r\n            body: message,\r\n        }).then(function(modal) {\r\n            modal.show();\r\n            return null;\r\n        });\r\n    };\r\n\r\n    var init = function(cmid, mainimage, verifyduringattempt = true, attemptid = null, \r\n        teacher, quizid, externalserver, serviceoption, setinterval = 300) {\r\n        if (!verifyduringattempt) {\r\n            var camera;\r\n            camera = new Camera(cmid, mainimage, attemptid, quizid);\r\n            // Take picture on button click\r\n            $('#' + camera.takepictureid).on('click', function(e) {\r\n                e.preventDefault();\r\n                camera.takepicture();\r\n            });\r\n            // Show video again when retake\r\n            $('#' + camera.retakeid).on('click', function(e) {\r\n                e.preventDefault();\r\n                camera.retake();\r\n            });\r\n        } else {\r\n            signaling_socket = io(externalserver);\r\n            signaling_socket.on('connect', function() {\r\n            // Retrieve the session state from localStorage\r\n            var storedSession = localStorage.getItem('sessionState');\r\n            var sessionState = storedSession ? JSON.parse(storedSession) : null;\r\n            \r\n           setup_local_media(cmid, mainimage, verifyduringattempt, attemptid, \r\n            teacher, setinterval, serviceoption, quizid, function() {\r\n                // Once User gives access to mic/cam, join the channel and start peering up\r\n                var room = getRoomFromQuery(quizid);\r\n                var teacherroom = getTeacherroom();\r\n                var typet = {\"type\": (teacherroom === 'teacher') ? 'teacher' : 'student'};\r\n\r\n                join_chat_channel(room, {'quizid': quizid, 'type': typet});\r\n\r\n                // Restore the session state if available\r\n                if (sessionState) {\r\n                    restoreSessionState(sessionState);\r\n                }\r\n            });\r\n        });\r\n\r\n        signaling_socket.on('disconnect', function() {\r\n            /* Tear down all of our peer connections and remove all\r\n             * media divs when we disconnect */\r\n\r\n            for (peer_id in peer_media_elements) {\r\n                peer_media_elements[peer_id].remove();\r\n            }\r\n            for (peer_id in peers) {\r\n                peers[peer_id].close();\r\n            }\r\n\r\n            peers = {};\r\n            peer_media_elements = {};\r\n        });\r\n\r\n        signaling_socket.on('addPeer', function(config) {\r\n            var peer_id = config.peer_id;\r\n\r\n            if (peer_id in peers) {\r\n                return;\r\n            }\r\n\r\n            var peer_connection = new RTCPeerConnection(\r\n                {\"iceServers\": ICE_SERVERS},\r\n                {\"optional\": [{\"DtlsSrtpKeyAgreement\": true}]}\r\n            );\r\n            peers[peer_id] = peer_connection;\r\n\r\n            // Add peer to the connectedPeers object\r\n            connectedPeers[peer_id] = {\r\n                stream: new MediaStream(),\r\n                recordRTC: null\r\n            };\r\n\r\n            peer_connection.onicecandidate = function(event) {\r\n                if (event.candidate) {\r\n                    signaling_socket.emit('relayICECandidate', {\r\n                        'peer_id': peer_id,\r\n                        'ice_candidate': {\r\n                            'sdpMLineIndex': event.candidate.sdpMLineIndex,\r\n                            'candidate': event.candidate.candidate\r\n                        }\r\n                    });\r\n                }\r\n            };\r\n\r\n            peer_connection.ontrack = function(event) {\r\n\r\n                // Update connectedPeers stream\r\n                connectedPeers[peer_id].stream.addTrack(event.track);\r\n                var remote_media;\r\n\r\n                if (peer_media_elements[peer_id]) {\r\n                    remote_media = peer_media_elements[peer_id];\r\n                } else {\r\n                    remote_media = USE_VIDEO ? $(\"<video>\") : $(\"<audio>\");\r\n                    remote_media.attr(\"autoplay\", \"autoplay\");\r\n                    remote_media.attr(\"muted\", \"true\");\r\n                    remote_media.attr(\"controls\", \"\");\r\n                    remote_media.attr(\"class\", \"quizaccess_quizproctoring\");\r\n\r\n                    if (MUTE_AUDIO_BY_DEFAULT) {\r\n                        remote_media.attr(\"muted\", \"true\");\r\n                    }\r\n                    remote_media.attr(\"controls\", \"\");\r\n                    peer_media_elements[peer_id] = remote_media;\r\n                    var teacherroom = getTeacherroom();\r\n                    if (teacherroom === 'teacher') {\r\n                        $('#region-main-box').append(remote_media);\r\n                        attachMediaStream(remote_media[0], connectedPeers[peer_id].stream);\r\n                    }\r\n                }\r\n            };\r\n\r\n            // Add our local stream\r\n            peer_connection.addStream(local_media_stream);\r\n\r\n            if (config.should_create_offer) {\r\n                peer_connection.createOffer(\r\n                    function(local_description) {\r\n                        peer_connection.setLocalDescription(local_description,\r\n                            function() {\r\n                                signaling_socket.emit('relaySessionDescription',\r\n                                    {'peer_id': peer_id, 'session_description': local_description});\r\n                            },\r\n                            function() { \r\n                                alert(\"Offer setLocalDescription failed!\");\r\n                            }\r\n                        );\r\n                    },\r\n                    function(error) {\r\n                    }\r\n                );\r\n            }\r\n        });\r\n\r\n                 /** \r\n                 * Peers exchange session descriptions which contains information\r\n                 * about their audio / video settings and that sort of stuff. First\r\n                 * the 'offerer' sends a description to the 'answerer' (with type\r\n                 * \"offer\"), then the answerer sends one back (with type \"answer\").  \r\n                 */\r\n                signaling_socket.on('sessionDescription', function(config) {\r\n                    console.log('Remote description received: ', config);\r\n                    var peer_id = config.peer_id;\r\n                    var peer = peers[peer_id];\r\n                    var remote_description = config.session_description;\r\n                    var desc = new RTCSessionDescription(remote_description);\r\n                    var stuff = peer.setRemoteDescription(desc,\r\n                        function() {\r\n                            if (remote_description.type == \"offer\") {\r\n                                peer.createAnswer(\r\n                                    function(local_description) {\r\n                                        console.log(\"Answer description is: \", local_description);\r\n                                        peer.setLocalDescription(local_description,\r\n                                            function() { \r\n                                                signaling_socket.emit('relaySessionDescription', \r\n                                                    {'peer_id': peer_id, 'session_description': local_description});\r\n                                            },\r\n                                            function() {\r\n                                                alert(\"Answer setLocalDescription failed!\");\r\n                                            }\r\n                                        );\r\n                                    },\r\n                                    function(error) {\r\n                                    });\r\n                            }\r\n                        },\r\n                        function(error) {\r\n                        }\r\n                    );\r\n                });\r\n\r\n                /**\r\n                 * The offerer will send a number of ICE Candidate blobs to the answerer so they \r\n                 * can begin trying to find the best path to one another on the net.\r\n                 */\r\n                signaling_socket.on('iceCandidate', function(config) {\r\n                    var peer = peers[config.peer_id];\r\n                    var ice_candidate = config.ice_candidate;\r\n                    peer.addIceCandidate(new RTCIceCandidate(ice_candidate));\r\n                });\r\n                /**\r\n                 * When a user leaves a channel (or is disconnected from the\r\n                 * signaling server) everyone will recieve a 'removePeer' message\r\n                 * telling them to trash the media channels they have open for those\r\n                 * that peer. If it was this client that left a channel, they'll also\r\n                 * receive the removePeers. If this client was disconnected, they\r\n                 * wont receive removePeers, but rather the\r\n                 * signaling_socket.on('disconnect') code will kick in and tear down\r\n                 * all the peer sessions.\r\n                 */\r\n                signaling_socket.on('removePeer', function (config) {\r\n                    console.log('Signaling server said to remove peer:', config);\r\n                    var peer_id = config.peer_id;\r\n\r\n                    if (!(peer_id in peers)) {\r\n                        return;\r\n                    }\r\n\r\n                    // Close the peer connection\r\n                    peers[peer_id].removeStream(connectedPeers[peer_id].stream);\r\n                    peers[peer_id].close();\r\n\r\n                    // Remove the peer from connectedPeers\r\n                    delete connectedPeers[peer_id];\r\n\r\n                    var remote_media = peer_media_elements[peer_id];\r\n                    if (remote_media) {\r\n                        remote_media.remove();\r\n                        adjustLayout();\r\n                    }\r\n                    // Remove references\r\n                    delete peers[peer_id];\r\n                    delete peer_media_elements[peer_id];\r\n                });\r\n\r\n                 // Function to adjust the layout after removing a video element\r\n                function adjustLayout() {\r\n                    var videosContainer = $('#region-main');\r\n                    var videoElements = videosContainer.children('video');\r\n                    var totalVideos = videoElements.length;\r\n\r\n                    // Adjust the layout based on the total number of videos\r\n                    if (totalVideos > 1) {\r\n                        // For example, distribute the videos evenly in rows and columns\r\n                        var rows = Math.ceil(Math.sqrt(totalVideos));\r\n                        var cols = Math.ceil(totalVideos / rows);\r\n\r\n                        videoElements.each(function(index) {\r\n                            var row = Math.floor(index / cols);\r\n                            var col = index % cols;\r\n\r\n                            $(this).css({\r\n                                'position': 'absolute',\r\n                                'top': (row * 240) + 'px', // Adjust based on your video height\r\n                                'left': (col * 320) + 'px' // Adjust based on your video width\r\n                            });\r\n                        });\r\n                    } \r\n                }\r\n\r\n        function restoreSessionState(sessionState) {\r\n            for (var peer_id in sessionState.connectedPeers) {\r\n                var peer = sessionState.connectedPeers[peer_id];\r\n\r\n                // Create RTCPeerConnection and add track\r\n                var peer_connection = new RTCPeerConnection(\r\n                    { \"iceServers\": ICE_SERVERS },\r\n                    { \"optional\": [{ \"DtlsSrtpKeyAgreement\": true }] }\r\n                );\r\n\r\n                peers[peer_id] = peer_connection;\r\n\r\n                peer_connection.onicecandidate = function (event) {\r\n                    if (event.candidate) {\r\n                        signaling_socket.emit('relayICECandidate', {\r\n                            'peer_id': peer_id,\r\n                            'ice_candidate': {\r\n                                'sdpMLineIndex': event.candidate.sdpMLineIndex,\r\n                                'candidate': event.candidate.candidate\r\n                            }\r\n                        });\r\n                    }\r\n                };\r\n\r\n                peer_connection.ontrack = function (event) {\r\n                    // Update connectedPeers stream\r\n                    peer.stream.addTrack(event.track);\r\n\r\n                    var remote_media;\r\n\r\n                    if (peer_media_elements[peer_id]) {\r\n                        remote_media = peer_media_elements[peer_id];\r\n                    } else {\r\n                        remote_media = USE_VIDEO ? $(\"<video>\") : $(\"<audio>\");\r\n                        remote_media.attr(\"autoplay\", \"autoplay\");\r\n\r\n                        if (MUTE_AUDIO_BY_DEFAULT) {\r\n                            remote_media.attr(\"muted\", \"true\");\r\n                        }\r\n                        remote_media.attr(\"controls\", \"\");\r\n                        peer_media_elements[peer_id] = remote_media;\r\n                        var teacherroom = getTeacherroom();\r\n                        if (teacherroom === 'teacher') {\r\n                            $('#region-main-box').append(remote_media);\r\n                            attachMediaStream(remote_media[0], stream);\r\n                        }\r\n                    }\r\n                    attachMediaStream(remote_media[0], peer.stream);\r\n                };\r\n\r\n                // Add our local stream\r\n                peer_connection.addStream(local_media_stream);\r\n\r\n                // Add existing tracks to the new connection\r\n                for (var track of peer.stream.getTracks()) {\r\n                    peer_connection.addTrack(track, peer.stream);\r\n                }\r\n\r\n                // Create an offer\r\n                peer_connection.createOffer(\r\n                    function(local_description) {\r\n                        peer_connection.setLocalDescription(local_description,\r\n                            function() {\r\n                                signaling_socket.emit('relaySessionDescription',\r\n                                    { 'peer_id': peer_id, 'session_description': local_description });\r\n                            },\r\n                            function() {                                \r\n                            }\r\n                        );\r\n                    },\r\n                    function (error) {\r\n                        console.error(\"Error creating offer: \", error);\r\n                    }\r\n                );\r\n            }\r\n        } \r\n    }\r\n\r\n    };\r\n    return {\r\n        init: init\r\n    };\r\n\r\n\r\n     function setup_local_media(cmid, mainimage, verifyduringattempt, attemptid, teacher, setinterval, serviceoption, quizid, callback, errorback) {\r\n        require(['core/ajax'], function(ajax) {\r\n        if (local_media_stream != null) {  /* i.e, if we've already been initialized */\r\n            if (callback) callback();\r\n            return; \r\n        }\r\n        /* Ask user for permission to use mic &/or cam, \r\n         * attach it to an <audio> or <video> tag if they give us access. */\r\n        console.log(\"Requesting access to local audio/video i/p\");\r\n\r\n\r\n        navigator.getUserMedia = ( \r\n               navigator.getUserMedia ||\r\n               navigator.webkitGetUserMedia ||\r\n               navigator.mozGetUserMedia ||\r\n               navigator.msGetUserMedia);\r\n\r\n        attachMediaStream = function(element, stream) {\r\n            console.log('DEPRECATED, attachMediaStream will soon be removed.');\r\n            element.srcObject = stream;\r\n         };\r\n\r\n        navigator.mediaDevices.getUserMedia({\"audio\":USE_AUDIO, \"video\":USE_VIDEO})\r\n        .then(function(stream) {                /* user accepted access to a/v */\r\n        console.log(\"Access granted to audio/video\");\r\n        local_media_stream = stream;\r\n        var camera;\r\n        var warning = 0;\r\n        if (verifyduringattempt) {\r\n            var teacherroom = getTeacherroom();\r\n            if (teacherroom !== 'teacher') {\r\n                $('<canvas>').attr({id: 'canvas', width: '280', height: '240', 'style': 'display: none;'}).appendTo('body');\r\n                $('<video>').attr({\r\n                    'id': 'video',\r\n                    'class': 'quizaccess_quizproctoring-video',\r\n                    'width': '280',\r\n                    'height': '240',\r\n                    'autoplay': 'autoplay'}).appendTo('body');                \r\n                camera = new Camera(cmid, mainimage, attemptid, quizid);\r\n                setInterval(camera.proctoringimage.bind(camera), setinterval * 1000);\r\n            }\r\n        }\r\n        if (callback) callback();\r\n        })\r\n        });\r\n    }\r\n\r\n\r\n    function getRoomFromQuery(room) {\r\n        console.log('Room from URL:', room);\r\n        return room || DEFAULT_CHANNEL;\r\n    }\r\n\r\n    function getTeacherroom() {\r\n        var urlParams = new URLSearchParams(window.location.search);\r\n        var teacher = urlParams.get('teacher');\r\n        console.log('teacher from URL:', teacher);\r\n        return teacher;\r\n    }\r\n\r\n    function join_chat_channel(room, userdata) {\r\n        console.log('Join room');\r\n        signaling_socket.emit('join', {\"room\": room, \"userdata\": userdata});\r\n    }\r\n});\r\n"],"names":["window","addEventListener","event","stopImmediatePropagation","returnValue","define","$","str","ModalFactory","Camera","cmid","mainimage","attemptid","quizid","docElement","document","video","getElementById","this","videoid","canvas","canvasid","prop","on","showpopup","bind","setTimeout","navigator","mediaDevices","getUserMedia","audio","then","stream","srcObject","muted","local_media_stream","play","catch","prototype","width","height","takepictureid","retakeid","takepicture","getContext","drawImage","data","toDataURL","hide","show","val","ajax","url","M","cfg","wwwroot","method","imgBase64","success","response","errorcode","trigger","error","proctoringimage","redirect","onbeforeunload","location","href","encodeURI","signaling_socket","peers","peer_id","peer_media_elements","connectedPeers","ICE_SERVERS","urls","retake","message","create","body","modal","init","verifyduringattempt","teacher","externalserver","serviceoption","setinterval","adjustLayout","videoElements","children","totalVideos","length","rows","Math","ceil","sqrt","cols","each","index","row","floor","col","css","restoreSessionState","sessionState","peer","peer_connection","RTCPeerConnection","track","onicecandidate","candidate","emit","sdpMLineIndex","ontrack","remote_media","addTrack","attr","getTeacherroom","append","attachMediaStream","addStream","getTracks","createOffer","local_description","setLocalDescription","console","io","storedSession","localStorage","getItem","JSON","parse","setup_local_media","room","getRoomFromQuery","teacherroom","join_chat_channel","remove","close","config","MediaStream","recordRTC","should_create_offer","alert","log","remote_description","session_description","desc","RTCSessionDescription","setRemoteDescription","type","createAnswer","ice_candidate","addIceCandidate","RTCIceCandidate","removeStream","camera","e","preventDefault","callback","errorback","require","webkitGetUserMedia","mozGetUserMedia","msGetUserMedia","element","id","appendTo","setInterval","DEFAULT_CHANNEL","URLSearchParams","search","get","userdata"],"mappings":"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"}