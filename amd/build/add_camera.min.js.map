{"version":3,"file":"add_camera.min.js","sources":["../src/add_camera.js"],"sourcesContent":["/**\r\n * JavaScript class for Camera\r\n *\r\n * @subpackage quizproctoring\r\n * @copyright  2020 Mahendra Soni <ms@taketwotechnologies.com> {@link https://taketwotechnologies.com}\r\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n */\r\n\r\ndefine(['jquery', 'core/str', 'core/modal_factory','core/ajax'],\r\nfunction($, str, ModalFactory, ajax) {\r\n    var Camera = function(cmid, mainimage = false, attemptid = null, quizid) {\r\n        var docElement = $(document);\r\n        this.video = document.getElementById(this.videoid);\r\n        this.canvas = document.getElementById(this.canvasid);\r\n        this.cmid = cmid;\r\n        this.quizid = quizid;\r\n        this.mainimage = mainimage;\r\n        this.attemptid = attemptid;\r\n        $(\"#id_submitbutton\").prop(\"disabled\", true);\r\n        docElement.on('popup', this.showpopup.bind(this));\r\n        setTimeout(navigator.mediaDevices.getUserMedia({video: true, audio: true})\r\n            .then(function(stream) {\r\n                if (this.video) {\r\n                  this.video.srcObject = stream;\r\n                  this.video.muted = true;                  \r\n                  local_media_stream = stream;\r\n                  startRecording();                   \r\n                  this.video.play();\r\n                  return true;\r\n                }\r\n                return true;\r\n            })\r\n        .catch(function() {\r\n            // Console.log(err);\r\n        }), 10000);\r\n    };\r\n\r\n    /** @type Tag element contain video. */\r\n    Camera.prototype.video = false;\r\n    /** @type String video elemend id. */\r\n    Camera.prototype.videoid = 'video';\r\n    /** @type Tag element contain canvas. */\r\n    Camera.prototype.canvas = false;\r\n    /** @type String video elemend id. */\r\n    Camera.prototype.canvasid = 'canvas';\r\n    /** @type int width of canvas object. */\r\n    Camera.prototype.width = 320;\r\n    /** @type int width of canvas object. */\r\n    Camera.prototype.height = 240;\r\n    /** @type String element contain takepicture button. */\r\n    Camera.prototype.takepictureid = 'takepicture';\r\n    /** @type String element contain retake button. */\r\n    Camera.prototype.retakeid = 'retake';\r\n    /** @type int course module id. */\r\n    Camera.prototype.cmid = false;\r\n    /** @type bool whether a main image or compare against an image. */\r\n    Camera.prototype.mainimage = false;\r\n     /** @type int attempt id. */\r\n    Camera.prototype.attemptid = false;\r\n     /** @type int quiz id. */\r\n    Camera.prototype.quizid = false;\r\n\r\n    Camera.prototype.takepicture = function() {\r\n        // Console.log('takepicture function');\r\n        var context = this.canvas.getContext('2d');\r\n        context.drawImage(this.video, 0, 0, this.width, this.height);\r\n        var data = this.canvas.toDataURL('image/png');\r\n        $('#' + this.videoid).hide();\r\n        $('#' + this.takepictureid).hide();\r\n        $('#' + this.canvasid).show();\r\n        $('#' + this.retakeid).show();\r\n        $(\"input[name='userimg']\").val(data);\r\n        $(\"#id_submitbutton\").prop(\"disabled\", true);\r\n        $.ajax({\r\n            url: M.cfg.wwwroot + '/mod/quiz/accessrule/quizproctoring/ajax.php',\r\n            method: 'POST',\r\n            data: {imgBase64: data, cmid: this.cmid, attemptid: this.attemptid, mainimage: this.mainimage},\r\n            success: function(response) {\r\n                if (response && response.errorcode) {\r\n                    // Console.log(response.errorcode);\r\n                    $(\"input[name='userimg']\").val('');\r\n                    $(document).trigger('popup', response.error);\r\n                } else {\r\n                    $(\"#id_submitbutton\").prop(\"disabled\", false);\r\n                }\r\n            }\r\n        });\r\n    };\r\n    Camera.prototype.proctoringimage = function() {\r\n        // Console.log(this.cmid);\r\n        var context = this.canvas.getContext('2d');\r\n        context.drawImage(this.video, 0, 0, this.width, this.height);\r\n        var data = this.canvas.toDataURL('image/png');\r\n        var quizid = this.quizid;\r\n        var cmid = this.cmid;\r\n        var attemptid = this.attemptid;\r\n        $.ajax({\r\n            url: M.cfg.wwwroot + '/mod/quiz/accessrule/quizproctoring/ajax.php',\r\n            method: 'POST',\r\n            data: {imgBase64: data, cmid: this.cmid, attemptid: this.attemptid, mainimage: this.mainimage},\r\n            success: function(response) {\r\n                if (response && response.errorcode) {\r\n                    console.log(response.errorcode);\r\n                    if(response.errorcode.length > 35){\r\n                        stopRecording(quizid, attemptid, cmid, 'Finish attempt ...');\r\n                    } else{\r\n                        $(document).trigger('popup', response.error);\r\n                    }\r\n                } else {\r\n                    if (response.redirect && response.url) {\r\n                        window.onbeforeunload = null;\r\n                        window.location.href = encodeURI(response.url);\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    };\r\n    \r\n    var signaling_socket = null;    /* our socket.io connection to our webserver */\r\n    var local_media_stream = null; /* our own mic / webcam */\r\n    var peers = {};                /* keep track of our peer connections, indexed by peer_id (aka socket.io id) */\r\n    var peer_media_elements = {};  /* keep track of our <video>/<audio> tags, indexed by peer_id */\r\n    var connectedPeers = {};\r\n\r\n    var recordingStatus = {};\r\n    var recording = false;\r\n    var recordRTC;\r\n    \r\n    var USE_AUDIO = true;\r\n    var USE_VIDEO = true;\r\n    var MUTE_AUDIO_BY_DEFAULT = true;\r\n\r\n    /** Use different stun server doing commercial stuff **/\r\n    /** Ref: https://gist.github.com/zziuni/3741933 **/\r\n    var ICE_SERVERS = [{urls:\"stun:stun.l.google.com:19302\"}];\r\n\r\n    Camera.prototype.retake = function() {\r\n        $(\"input[name='userimg']\").val('');\r\n        $('#' + this.videoid).show(this.cmid);\r\n        $('#' + this.takepictureid).show();\r\n        $('#' + this.canvasid).hide();\r\n        $('#' + this.retakeid).hide();\r\n    };\r\n    Camera.prototype.showpopup = function(event, message) {\r\n        return ModalFactory.create({\r\n            body: message,\r\n        }).then(function(modal) {\r\n            modal.show();\r\n            return null;\r\n        });\r\n    };\r\n\r\n    var init = function(cmid, mainimage, verifyduringattempt = true, attemptid = null, teacher, quizid, externalserver, serviceoption, browsersecurity= null, setinterval = 300) {        \r\n        if(!verifyduringattempt) {\r\n            var camera;\r\n            camera = new Camera(cmid, mainimage, attemptid, quizid);\r\n            // Take picture on button click\r\n            $('#' + camera.takepictureid).on('click', function(e) {\r\n                e.preventDefault();\r\n                camera.takepicture();\r\n            });\r\n            // Show video again when retake\r\n            $('#' + camera.retakeid).on('click', function(e) {\r\n                e.preventDefault();\r\n                camera.retake();\r\n            });            \r\n        } else {\r\n            if(browsersecurity === 'securewindow'){\r\n                document.onkeydown = function (e) {\r\n                    return false;\r\n                }\r\n\r\n                /** TO DISABLE SCREEN CAPTURE **/\r\n                document.addEventListener('keyup', (e) => {\r\n                    if (e.key == 'PrintScreen') {\r\n                        navigator.clipboard.writeText('');\r\n                        alert('Screenshots disabled!');\r\n                    }\r\n                });\r\n\r\n                /** TO DISABLE PRINTS WHIT CTRL+P **/\r\n                document.addEventListener('keydown', (e) => {\r\n                    if (e.ctrlKey && e.key == 'p') {\r\n                        alert('This section is not allowed to print or export to PDF');\r\n                        e.cancelBubble = true;\r\n                        e.preventDefault();\r\n                        e.stopImmediatePropagation();\r\n                    }\r\n                });\r\n            }\r\n            signaling_socket = io(externalserver);\r\n\r\n        signaling_socket.on('connect', function () {\r\n            console.log(\"Connected to signaling server..\");\r\n\r\n             // Retrieve the session state from localStorage\r\n            var storedSession = localStorage.getItem('sessionState');\r\n            var sessionState = storedSession ? JSON.parse(storedSession) : null;\r\n            \r\n           setup_local_media(cmid, mainimage, verifyduringattempt, attemptid, teacher, browsersecurity, setinterval, serviceoption, quizid, function () {\r\n                // Once User gives access to mic/cam, join the channel and start peering up\r\n                var room = getRoomFromQuery(quizid);\r\n                var teacherroom = getTeacherroom();\r\n                var typet = { \"type\": (teacherroom === 'teacher') ? 'teacher' : 'student' }; \r\n\r\n                join_chat_channel(room, { 'quizid': quizid, 'type': typet });         // LINE WHICH SOLVED\r\n\r\n                // Restore the session state if available\r\n                if (sessionState) {\r\n                    restoreSessionState(sessionState);\r\n                }\r\n            });         \r\n        });\r\n\r\n        signaling_socket.on('disconnect', function() {\r\n            console.log(\"Disconnected from signaling server\");\r\n            /* Tear down all of our peer connections and remove all\r\n             * media divs when we disconnect */\r\n\r\n            for (peer_id in peer_media_elements) {\r\n                peer_media_elements[peer_id].remove();\r\n            }\r\n            for (peer_id in peers) {\r\n                peers[peer_id].close();\r\n            }\r\n\r\n            peers = {};\r\n            peer_media_elements = {};\r\n        });\r\n\r\n        signaling_socket.on('addPeer', function(config) {\r\n            console.log('Signaling server said to add peer:', config);\r\n            var peer_id = config.peer_id;\r\n\r\n            if (peer_id in peers) {\r\n                console.log(\"Already connected to peer \", peer_id);\r\n                return;\r\n            }\r\n\r\n            var peer_connection = new RTCPeerConnection(\r\n                {\"iceServers\": ICE_SERVERS},\r\n                {\"optional\": [{\"DtlsSrtpKeyAgreement\": true}]}\r\n            );\r\n            peers[peer_id] = peer_connection;\r\n\r\n            // Add peer to the connectedPeers object\r\n            connectedPeers[peer_id] = {\r\n                stream: new MediaStream(),\r\n                recordRTC: null\r\n            };\r\n\r\n            peer_connection.onicecandidate = function(event) {\r\n                if (event.candidate) {\r\n                    signaling_socket.emit('relayICECandidate', {\r\n                        'peer_id': peer_id,\r\n                        'ice_candidate': {\r\n                            'sdpMLineIndex': event.candidate.sdpMLineIndex,\r\n                            'candidate': event.candidate.candidate\r\n                        }\r\n                    });\r\n                }\r\n            };\r\n\r\n            peer_connection.ontrack = function(event) {\r\n                console.log(\"ontrack\", event);\r\n\r\n                // Update connectedPeers stream\r\n                connectedPeers[peer_id].stream.addTrack(event.track);                \r\n                var remote_media;\r\n\r\n                if (peer_media_elements[peer_id]) {\r\n                    remote_media = peer_media_elements[peer_id];\r\n                } \r\n                else {\r\n                    remote_media = USE_VIDEO ? $(\"<video>\") : $(\"<audio>\");\r\n                    remote_media.attr(\"autoplay\", \"autoplay\");\r\n                    remote_media.attr(\"muted\", \"true\");  /* always mute ourselves by default */\r\n                    remote_media.attr(\"controls\", \"\");\r\n                    remote_media.attr(\"class\", \"quizaccess_quizproctoring\");\r\n                    \r\n                    if (MUTE_AUDIO_BY_DEFAULT) {\r\n                        remote_media.attr(\"muted\", \"true\");\r\n                    }\r\n                    remote_media.attr(\"controls\", \"\");\r\n                    peer_media_elements[peer_id] = remote_media;\r\n                    var teacherroom = getTeacherroom();\r\n                    if (teacherroom === 'teacher') {\r\n                        $('#region-main-box').append(remote_media);\r\n                        attachMediaStream(remote_media[0], connectedPeers[peer_id].stream);\r\n                    }\r\n                }\r\n                \r\n            };\r\n\r\n            // Add our local stream\r\n            peer_connection.addStream(local_media_stream);\r\n\r\n            if (config.should_create_offer) {\r\n                console.log(\"Creating RTC offer to \", peer_id);\r\n                peer_connection.createOffer(\r\n                    function(local_description) {\r\n                        console.log(\"Local offer description is: \", local_description);\r\n                        peer_connection.setLocalDescription(local_description,\r\n                            function() {\r\n                                signaling_socket.emit('relaySessionDescription',\r\n                                    {'peer_id': peer_id, 'session_description': local_description});\r\n                                console.log(\"Offer setLocalDescription succeeded\");\r\n                            },\r\n                            function() { Alert(\"Offer setLocalDescription failed!\"); }\r\n                        );\r\n                    },\r\n                    function(error) {\r\n                        console.log(\"Error sending offer: \", error);\r\n                    }\r\n                );\r\n            }\r\n        });\r\n\r\n         /** \r\n                 * Peers exchange session descriptions which contains information\r\n                 * about their audio / video settings and that sort of stuff. First\r\n                 * the 'offerer' sends a description to the 'answerer' (with type\r\n                 * \"offer\"), then the answerer sends one back (with type \"answer\").  \r\n                 */\r\n                signaling_socket.on('sessionDescription', function(config) {\r\n                    console.log('Remote description received: ', config);\r\n                    var peer_id = config.peer_id;\r\n                    var peer = peers[peer_id];\r\n                    var remote_description = config.session_description;\r\n                    console.log(config.session_description);\r\n\r\n                    var desc = new RTCSessionDescription(remote_description);\r\n                    var stuff = peer.setRemoteDescription(desc, \r\n                        function() {\r\n                            console.log(\"setRemoteDescription succeeded\");\r\n                            if (remote_description.type == \"offer\") {\r\n                                console.log(\"Creating answer\");\r\n                                peer.createAnswer(\r\n                                    function(local_description) {\r\n                                        console.log(\"Answer description is: \", local_description);\r\n                                        peer.setLocalDescription(local_description,\r\n                                            function() { \r\n                                                signaling_socket.emit('relaySessionDescription', \r\n                                                    {'peer_id': peer_id, 'session_description': local_description});\r\n                                                console.log(\"Answer setLocalDescription succeeded\");\r\n                                            },\r\n                                            function() { Alert(\"Answer setLocalDescription failed!\"); }\r\n                                        );\r\n                                    },\r\n                                    function(error) {\r\n                                        console.log(\"Error creating answer: \", error);\r\n                                        console.log(peer);\r\n                                    });\r\n                            }\r\n                        },\r\n                        function(error) {\r\n                            console.log(\"setRemoteDescription error: \", error);\r\n                        }\r\n                    );\r\n                    console.log(\"Description Object: \", desc);\r\n\r\n                });\r\n\r\n /**\r\n                 * The offerer will send a number of ICE Candidate blobs to the answerer so they \r\n                 * can begin trying to find the best path to one another on the net.\r\n                 */\r\n                signaling_socket.on('iceCandidate', function(config) {\r\n                    var peer = peers[config.peer_id];\r\n                    var ice_candidate = config.ice_candidate;\r\n                    peer.addIceCandidate(new RTCIceCandidate(ice_candidate));\r\n                });\r\n     /**\r\n                 * When a user leaves a channel (or is disconnected from the\r\n                 * signaling server) everyone will recieve a 'removePeer' message\r\n                 * telling them to trash the media channels they have open for those\r\n                 * that peer. If it was this client that left a channel, they'll also\r\n                 * receive the removePeers. If this client was disconnected, they\r\n                 * wont receive removePeers, but rather the\r\n                 * signaling_socket.on('disconnect') code will kick in and tear down\r\n                 * all the peer sessions.\r\n                 */\r\n                signaling_socket.on('removePeer', function (config) {\r\n                    console.log('Signaling server said to remove peer:', config);\r\n                    var peer_id = config.peer_id;\r\n\r\n                    if (!(peer_id in peers)) {\r\n                        console.log(\"[\" + socket.id + \"] ERROR: peer_id does not exist\", peer_id);\r\n                        return;\r\n                    }\r\n\r\n                    // Close the peer connection\r\n                    peers[peer_id].removeStream(connectedPeers[peer_id].stream);\r\n                    peers[peer_id].close();\r\n\r\n                    // Remove the peer from connectedPeers\r\n                    delete connectedPeers[peer_id];\r\n\r\n                    var remote_media = peer_media_elements[peer_id];\r\n                    if (remote_media) {\r\n                        remote_media.remove();\r\n                        adjustLayout();\r\n                    }\r\n                    // Remove references\r\n                    delete peers[peer_id];\r\n                    delete peer_media_elements[peer_id];\r\n                });\r\n\r\n                 // Function to adjust the layout after removing a video element\r\n                function adjustLayout() {\r\n                    var videosContainer = $('#region-main');\r\n                    var videoElements = videosContainer.children('video');\r\n                    var totalVideos = videoElements.length;\r\n\r\n                    // Adjust the layout based on the total number of videos\r\n                    if (totalVideos > 1) {\r\n                        // For example, distribute the videos evenly in rows and columns\r\n                        var rows = Math.ceil(Math.sqrt(totalVideos));\r\n                        var cols = Math.ceil(totalVideos / rows);\r\n\r\n                        videoElements.each(function(index) {\r\n                            var row = Math.floor(index / cols);\r\n                            var col = index % cols;\r\n\r\n                            $(this).css({\r\n                                'position': 'absolute',\r\n                                'top': (row * 240) + 'px', // Adjust based on your video height\r\n                                'left': (col * 320) + 'px' // Adjust based on your video width\r\n                            });\r\n                        });\r\n                    } \r\n                }\r\n\r\n        function restoreSessionState(sessionState) {\r\n            for (var peer_id in sessionState.connectedPeers) {\r\n                var peer = sessionState.connectedPeers[peer_id];\r\n\r\n                // Create RTCPeerConnection and add track\r\n                var peer_connection = new RTCPeerConnection(\r\n                    { \"iceServers\": ICE_SERVERS },\r\n                    { \"optional\": [{ \"DtlsSrtpKeyAgreement\": true }] }\r\n                );\r\n\r\n                peers[peer_id] = peer_connection;\r\n\r\n                peer_connection.onicecandidate = function (event) {\r\n                    if (event.candidate) {\r\n                        signaling_socket.emit('relayICECandidate', {\r\n                            'peer_id': peer_id,\r\n                            'ice_candidate': {\r\n                                'sdpMLineIndex': event.candidate.sdpMLineIndex,\r\n                                'candidate': event.candidate.candidate\r\n                            }\r\n                        });\r\n                    }\r\n                };\r\n\r\n                peer_connection.ontrack = function (event) {\r\n                    // Update connectedPeers stream\r\n                    peer.stream.addTrack(event.track);\r\n\r\n                    var remote_media;\r\n\r\n                    if (peer_media_elements[peer_id]) {\r\n                        remote_media = peer_media_elements[peer_id];\r\n                    } else {\r\n                        remote_media = USE_VIDEO ? $(\"<video>\") : $(\"<audio>\");\r\n                        remote_media.attr(\"autoplay\", \"autoplay\");\r\n\r\n                        if (MUTE_AUDIO_BY_DEFAULT) {\r\n                            remote_media.attr(\"muted\", \"true\");\r\n                        }\r\n                        remote_media.attr(\"controls\", \"\");\r\n                        peer_media_elements[peer_id] = remote_media;\r\n                        var teacherroom = getTeacherroom();\r\n                        if (teacherroom === 'teacher') {\r\n                            $('#region-main-box').append(remote_media);\r\n                            attachMediaStream(remote_media[0], stream);\r\n                        }\r\n                    }\r\n\r\n                    attachMediaStream(remote_media[0], peer.stream);\r\n                };\r\n\r\n                // Add our local stream\r\n                peer_connection.addStream(local_media_stream);\r\n\r\n                // Add existing tracks to the new connection\r\n                for (var track of peer.stream.getTracks()) {\r\n                    peer_connection.addTrack(track, peer.stream);\r\n                }\r\n\r\n                // Create an offer\r\n                peer_connection.createOffer(\r\n                    function (local_description) {\r\n                        peer_connection.setLocalDescription(local_description,\r\n                            function () {\r\n                                signaling_socket.emit('relaySessionDescription',\r\n                                    { 'peer_id': peer_id, 'session_description': local_description });\r\n                            },\r\n                            function () { console.error(\"Offer setLocalDescription failed!\"); }\r\n                        );\r\n                    },\r\n                    function (error) {\r\n                        console.error(\"Error creating offer: \", error);\r\n                    }\r\n                );\r\n            }\r\n        }\r\n       \r\n        \r\n        $('#mod_quiz-next-nav').click(function(event) {\r\n            var text = $(this).attr('value');\r\n            event.preventDefault();               \r\n            $(\"#mod_quiz-next-nav\").prop(\"disabled\", true);\r\n            stopRecording(quizid, attemptid, cmid, text);\r\n        });\r\n\r\n    }\r\n\r\n    };\r\n    return {\r\n        init: init\r\n    };\r\n\r\n       function startRecording() {\r\n            // Create a RecordRTC object for the local user\r\n            recordRTC = RecordRTC(local_media_stream, {\r\n                type: 'video' // or 'audio' for audio recording\r\n            });\r\n\r\n            recordRTC.startRecording();\r\n            recording = true;\r\n        }\r\n\r\n        function stopRecording(quizid, attemptid, cmid, text) {\r\n         require(['core/ajax'], function(ajax) {\r\n            // Stop recording for the local user\r\n            if (recordRTC) {\r\n                recordRTC.stopRecording(function (videoURL) {\r\n                    // videoURL contains the recorded video data\r\n                    console.log(videoURL);\r\n\r\n                    // Display the recorded video on the page\r\n                    var recordedVideo = $(\"<video controls>\").attr(\"src\", videoURL);\r\n                    uploadToServer(recordRTC, quizid, attemptid, cmid, function(progress, fileURL) {\r\n                        if(progress === 'ended') {\r\n                            console.log('save successfully');\r\n                            console.log(quizid);\r\n                            videopath = fileURL;\r\n                            const requestvideo = {\r\n                                methodname: 'quizaccess_quizproctoring_save_video_recording',\r\n                                args: {\r\n                                    videoURL: fileURL,\r\n                                    quizid: quizid,\r\n                                    attemptid: attemptid,\r\n                                    text: text,\r\n                                    currenturl:window.location.href,\r\n                                },\r\n                            };                       \r\n                            ajax.call([requestvideo])[0].done(function(result) {\r\n                                if(result.success === true) {\r\n                                    console.log(result);\r\n                                    //$('#loading').hide();\r\n                                    window.location = result.url;\r\n                                }\r\n                            });                        \r\n                        }\r\n                    });                    \r\n               });\r\n            }\r\n        });\r\n\r\n\r\n        function uploadToServer(recordRTC, quizid, attemptid, cmid, callback) {\r\n            var blob = recordRTC instanceof Blob ? recordRTC : recordRTC.blob;\r\n            var fileType = blob.type.split('/')[0] || 'audio';\r\n            var fileName = (Math.random() * 1000).toString().replace('.', '');\r\n\r\n            if (fileType === 'audio') {\r\n                fileName += '.' + (!!navigator.mozGetUserMedia ? 'ogg' : 'wav');\r\n            } else {\r\n                fileName += '.webm';\r\n            }\r\n\r\n            // create FormData\r\n            var formData = new FormData();\r\n            formData.append(fileType + '-filename', fileName);\r\n            formData.append(fileType + '-blob', blob);\r\n            formData.append('cmid', cmid);\r\n            formData.append('quizid', quizid);\r\n            formData.append('attemptid', attemptid);\r\n\r\n            callback('Uploading ' + fileType + ' recording to server.');\r\n\r\n            // var upload_url = 'https://your-domain.com/files-uploader/';\r\n            var upload_url = '/mod/quiz/accessrule/quizproctoring/save.php';\r\n\r\n            // var upload_directory = upload_url;\r\n            var upload_directory = 'uploads/';\r\n\r\n            makeXMLHttpRequest(upload_url, formData, function(progress) {\r\n                if (progress !== 'upload-ended') {\r\n                    callback(progress);\r\n                    return;\r\n                }\r\n\r\n                callback('ended', fileName);\r\n\r\n            });\r\n        }\r\n\r\n        function makeXMLHttpRequest(url, data, callback) {\r\n            var request = new XMLHttpRequest();\r\n            request.onreadystatechange = function() {\r\n                if (request.readyState == 4 && request.status == 200) {\r\n                    callback('upload-ended');\r\n                }\r\n            };\r\n\r\n            request.upload.onloadstart = function() {\r\n                callback('Upload started...');\r\n            };\r\n\r\n            request.upload.onprogress = function(event) {\r\n                callback('Upload Progress ' + Math.round(event.loaded / event.total * 100) + \"%\");\r\n            };\r\n\r\n            request.upload.onload = function() {\r\n                callback('progress-about-to-end');\r\n            };\r\n\r\n            request.upload.onload = function() {\r\n                callback('progress-ended');\r\n            };\r\n\r\n            request.upload.onerror = function(error) {\r\n                callback('Failed to upload to server');\r\n                console.error('XMLHttpRequest failed', error);\r\n            };\r\n\r\n            request.upload.onabort = function(error) {\r\n                callback('Upload aborted.');\r\n                console.error('XMLHttpRequest aborted', error);\r\n            };\r\n\r\n            request.open('POST', url);\r\n            request.send(data);\r\n        }\r\n\r\n       recording = false;\r\n    }\r\n\r\n\r\n     function setup_local_media(cmid, mainimage, verifyduringattempt, attemptid, teacher, browsersecurity,setinterval, serviceoption, quizid, callback, errorback) {\r\n        require(['core/ajax'], function(ajax) {\r\n        if (local_media_stream != null) {  /* i.e, if we've already been initialized */\r\n            if (callback) callback();\r\n            return; \r\n        }\r\n        /* Ask user for permission to use mic &/or cam, \r\n         * attach it to an <audio> or <video> tag if they give us access. */\r\n        console.log(\"Requesting access to local audio/video i/p\");\r\n\r\n\r\n        navigator.getUserMedia = ( \r\n               navigator.getUserMedia ||\r\n               navigator.webkitGetUserMedia ||\r\n               navigator.mozGetUserMedia ||\r\n               navigator.msGetUserMedia);\r\n\r\n        attachMediaStream = function(element, stream) {\r\n            console.log('DEPRECATED, attachMediaStream will soon be removed.');\r\n            element.srcObject = stream;\r\n         };\r\n\r\n        navigator.mediaDevices.getUserMedia({\"audio\":USE_AUDIO, \"video\":USE_VIDEO})\r\n        .then(function(stream) {                /* user accepted access to a/v */\r\n        console.log(\"Access granted to audio/video\");\r\n        local_media_stream = stream;\r\n        var camera;\r\n        var warning = 0;\r\n        console.log(browsersecurity);\r\n        if (verifyduringattempt) {\r\n            var teacherroom = getTeacherroom();\r\n            if (teacherroom !== 'teacher') {\r\n                $('<canvas>').attr({id: 'canvas', width: '280', height: '240', 'style': 'display: none;'}).appendTo('body');\r\n                $('<video>').attr({\r\n                    'id': 'video',\r\n                    'class': 'quizaccess_quizproctoring-video',\r\n                    'width': '280',\r\n                    'height': '240',\r\n                    'autoplay': 'autoplay'}).appendTo('body');                \r\n                if(!teacher && (browsersecurity === 'securewindow')) {\r\n                        window.addEventListener('blur', function(){\r\n                           warning = warning +1;\r\n                           const request = {\r\n                            methodname: 'quizaccess_quizproctoring_save_threshold_warning',\r\n                            args: {\r\n                                quizid: quizid,\r\n                                attemptid: attemptid,\r\n                                serviceoption: serviceoption\r\n                            },\r\n                        };                       \r\n                        ajax.call([request])[0].done(function(result) {\r\n                            if(result.url) {             \r\n                                stopRecording(quizid, attemptid, cmid, 'Finish attempt ...');\r\n                            } else {\r\n                                $(document).trigger('popup', result.warning);\r\n                            }\r\n                        });\r\n                           \r\n                        }, false);\r\n                        \r\n                    \r\n                }\r\n                camera = new Camera(cmid, mainimage, attemptid, quizid);\r\n                setInterval(camera.proctoringimage.bind(camera), setinterval * 1000);\r\n            }\r\n        }\r\n            if (callback) callback();\r\n        })\r\n        });\r\n    }\r\n\r\n\r\n    function getRoomFromQuery(room) {\r\n        console.log('Room from URL:', room);\r\n        return room || DEFAULT_CHANNEL;\r\n    }\r\n\r\n    function getTeacherroom() {\r\n        var urlParams = new URLSearchParams(window.location.search);\r\n        var teacher = urlParams.get('teacher');\r\n        console.log('teacher from URL:', teacher);\r\n        return teacher;\r\n    }\r\n\r\n    function join_chat_channel(room, userdata) {\r\n        console.log('Join room');\r\n        signaling_socket.emit('join', {\"room\": room, \"userdata\": userdata});\r\n    }\r\n});\r\n"],"names":["define","$","str","ModalFactory","ajax","Camera","cmid","mainimage","attemptid","quizid","docElement","document","video","getElementById","this","videoid","canvas","canvasid","prop","on","showpopup","bind","setTimeout","navigator","mediaDevices","getUserMedia","audio","then","stream","srcObject","muted","local_media_stream","startRecording","play","catch","prototype","width","height","takepictureid","retakeid","takepicture","getContext","drawImage","data","toDataURL","hide","show","val","url","M","cfg","wwwroot","method","imgBase64","success","response","errorcode","trigger","error","proctoringimage","console","log","length","stopRecording","redirect","window","onbeforeunload","location","href","encodeURI","recordRTC","signaling_socket","peers","peer_media_elements","connectedPeers","ICE_SERVERS","urls","retake","event","message","create","body","modal","init","verifyduringattempt","teacher","externalserver","serviceoption","browsersecurity","setinterval","adjustLayout","videoElements","children","totalVideos","rows","Math","ceil","sqrt","cols","each","index","row","floor","col","css","restoreSessionState","sessionState","peer_id","peer","peer_connection","RTCPeerConnection","track","onicecandidate","candidate","emit","sdpMLineIndex","ontrack","remote_media","addTrack","attr","getTeacherroom","append","attachMediaStream","addStream","getTracks","createOffer","local_description","setLocalDescription","onkeydown","e","addEventListener","key","clipboard","writeText","alert","ctrlKey","cancelBubble","preventDefault","stopImmediatePropagation","io","storedSession","localStorage","getItem","JSON","parse","setup_local_media","room","getRoomFromQuery","teacherroom","join_chat_channel","remove","close","config","MediaStream","should_create_offer","Alert","remote_description","session_description","desc","RTCSessionDescription","setRemoteDescription","type","createAnswer","ice_candidate","addIceCandidate","RTCIceCandidate","removeStream","socket","id","click","text","camera","RecordRTC","require","videoURL","callback","blob","Blob","fileType","split","fileName","random","toString","replace","mozGetUserMedia","formData","FormData","request","XMLHttpRequest","onreadystatechange","readyState","status","upload","onloadstart","onprogress","round","loaded","total","onload","onerror","onabort","open","send","makeXMLHttpRequest","progress","uploadToServer","fileURL","videopath","requestvideo","methodname","args","currenturl","call","done","result","errorback","webkitGetUserMedia","msGetUserMedia","element","appendTo","warning","setInterval","DEFAULT_CHANNEL","URLSearchParams","search","get","userdata"],"mappings":"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"}